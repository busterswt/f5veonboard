heat_template_version: 2013-05-23

description: This template deploys a Linux image as a TMOS HA VE firewall onboarding server.

parameters:
  flavor:
    type: string
    label: F5 Onboard Server Flavor
    description: Type of instance (flavor) to be used on the compute instance.
    default: m1.medium
    constraints:
      - custom_constraint: nova.flavor 
  image:
    type: string
    label: F5 Onboard Server Ubuntu Image
    description: The image to be used on the compute instance.
    constraints:
      - custom_constraint: glance.image 
  private_network:
    type: string
    label: F5 Onboard Server Management Network
    description: Private network to attach server to.
    default: private-net
    constraints:
      - custom_constraint: neutron.network
  http_proxy_host:
    type: string
    label: HTTP Proxy Host to user to aquire resources
    default: None
  http_proxy_port:
    type: number
    label: HTTP Proxy Port to use to aquire resources
    default: 8080
    constraints:
      - range: { min: 1024, max: 65534 }
  f5_odk_package_url:
    type: string
    label: F5 OpenStack Deployment Kit URL
    description: The URL to download the ODK debian package
    default: https://raw.githubusercontent.com/f5openstackcommunity/f5veonboard/master/packages/odk.deb
  f5_onboard_package_url:
    type: string
    label: F5 Virtual Edition Onboard Tools URL
    description: The URL to download the ODK debian package
    default: https://raw.githubusercontent.com/f5openstackcommunity/f5veonboard/master/packages/f5_onboard.deb
  f5_cluster_policy_file_url:
    type: string
    label: F5 Cluster Policy File URL
    description: The URL for the cluster policy file
    default: https://raw.githubusercontent.com/f5openstackcommunity/f5veonboard/master/includes/bookmarks_hp.json
  f5_fw_os_auth_url:
    type: string
    label: FW OS Keystone Auth URL
    description: Keystone URL to perform FW service creation
    default: http://10.1.0.42:5000/v2.0
  f5_fw_os_tenant:
    type: string
    label: FW OS Create Tenant
    description: Tenant to perform FW service creation
    default: admin
  f5_fw_os_user:
    type: string
    label: FW OS Create User
    description: User to perform image import services
    default: admin
  f5_fw_os_password:
    type: string
    label: FW OS Create User Password
    description: Password used to perform image import services
    default: admin
    hidden: true
  f5_fw_os_mgmt_network:
    type: string
    label: F5 FW Management Network
    description: F5 FW Management Network.
    default: private-mgmt
    constraints:
      - custom_constraint: neutron.network
  f5_fw_os_ha_network:
    type: string
    label: F5 FW HA Network
    description: F5 FW HA Network.
    default: private-ha
    constraints:
      - custom_constraint: neutron.network
  f5_fw_os_trusted_network:
    type: string
    label: F5 FW Trusted Network
    description: F5 FW Trusted Network.
    default: private-trusted
    constraints:
      - custom_constraint: neutron.network
  f5_fw_os_untrusted_network:
    type: string
    label: F5 FW Untrusted Network
    description: F5 FW Untrusted Network.
    default: private-untrusted
    constraints:
      - custom_constraint: neutron.network
  f5_fw_ssh_key:
    type: string
    label: F5 FW Root SSH Key Name
    description: Name of key-pair to be installed on the FW instances.
    default: my_key
    constraints:
      - custom_constraint: nova.keypair 
  f5_fw_admin_password:
    type: string
    label: F5 FW Admin User Password
    description: Password used to perform image import services
    default: admin
    hidden: true  
  f5_fw_root_password:
    type: string
    label: F5 FW Root User Password
    description: Password used to perform image import services
    default: admin
    hidden: true
  f5_fw_license_1:
    type: string
    label: FW License Base Key
    description: F5 TMOS License Basekey
    default: None
    hidden: true
  f5_fw_license_2:
    type: string
    label: FW License Base Key
    description: F5 TMOS License Basekey
    default: None
    hidden: true

parameter_groups:
- parameters:
  - flavor
  - image
  - private_network
  - http_proxy_host
  - http_proxy_port
- parameters:
  - f5_fw_os_auth_url
  - f5_fw_os_tenant
  - f5_fw_os_user
  - f5_fw_os_password
  - f5_fw_os_mgmt_network
  - f5_fw_os_ha_network
  - f5_fw_os_trusted_network
  - f5_fw_os_untrusted_network
- parameters:
  - f5_fw_ssh_key
  - f5_fw_admin_password
  - f5_fw_root_password
  - f5_fw_license_1
  - f5_fw_license_2
- parameters:
  - f5_odk_package_url
  - f5_onboard_package_url
  - f5_cluster_policy_file_url

resources:
  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle }
      count: 1
      timeout: 3600

  wait_handle:
    type: OS::Heat::WaitConditionHandle
    
  onboard_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: onboard_security_group
      rules: 
        - protocol: icmp
          direction: ingress
        - protocol: icmp
          direction: egress
        - protocol: tcp
          direction: ingress
        - protocol: tcp
          direction: egress
        - protocol: udp
          direction: ingress
        - protocol: udp
          direction: egress            
    
  onboard_instance:
    type: OS::Nova::Server
    properties:
      image: { get_param: image }
      security_groups:
        - { get_resource: onboard_security_group }
      flavor: { get_param: flavor }
      networks:
        - network: { get_param: private_network }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __http_proxy_host__: { get_param: http_proxy_host }
            __http_proxy_port__: { get_param: http_proxy_port }
            __f5_odk_package_url__: { get_param: f5_odk_package_url }
            __f5_onboard_package_url__: { get_param: f5_onboard_package_url }
            __f5_image_import_bookmark_file_url__: { get_param: f5_image_import_bookmark_file_url }
            __f5_image_import_auth_url__: { get_param: f5_image_import_auth_url }
            __f5_image_import_tenant__: { get_param: f5_image_import_tenant }
            __f5_image_import_user__: { get_param: f5_image_import_user }
            __f5_image_import_password__: { get_param: f5_image_import_password }
            wc_notify: { get_attr: ['wait_handle', 'curl_cli'] }
          template: |
            #!/bin/bash -ex

            # create a onboard user
            adduser onboard --disabled-login --gecos 'Onboard' --quiet --ingroup sudo
            echo onboard:onboard|chpasswd
            sed -i 's|[#]*PasswordAuthentication no|PasswordAuthentication yes|g' /etc/ssh/sshd_config
            sed -i 's|UsePAM no|UsePAM yes|g' /etc/ssh/sshd_config
            service ssh restart
            
            if [[ "__http_proxy_host__" != "None" ]]
            then
                export http_proxy=__http_proxy_host__:__http_proxy_port__
                export https_proxy=__http_proxy_host__:__http_proxy_port__
            fi
            
                        
            
            wc_notify --data-binary '{"status": "SUCCESS"}'    
    
